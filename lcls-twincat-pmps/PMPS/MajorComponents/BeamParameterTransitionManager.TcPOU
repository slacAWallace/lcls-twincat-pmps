<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.18">
  <POU Name="BeamParameterTransitionManager" Id="{f431705f-a58e-48ab-bbd5-262d6c623c7b}" SpecialFunc="None">
    <Declaration><![CDATA[(*
Implements the procedure for safely transitioning between device states by asserting the correct beam parameters for 
the state *)
FUNCTION_BLOCK BeamParameterTransitionManager
VAR_IN_OUT
    
    fbArbiter    :    FB_Arbiter; //Connect to local arbiter
    
END_VAR
VAR_INPUT
    i_TransitionAssertionID    :    UDINT := 0;
    i_stTransitionAssertion : ST_BeamParams := PMPS_GVL.cstSafeBeam; //Assertion required during transition (always safer than anything inbetween)
    
    i_nRequestedAssertionID    :    UDINT := 0;
    i_stRequestedAssertion    :    ST_BeamParams := PMPS_GVL.cstSafeBeam; //Requested assertion, change whenever
    
    i_xMoving    :    BOOL := FALSE; //Provide rising edge when device begins moving <remove>
    i_xDoneMoving    :    BOOL := FALSE; //Provide rising edge when device is done with a move
    
    stCurrentBeamParameters    :    ST_BeamParams := PMPS_GVL.cstFullBeam; //Connect to current beam parameters
    
    // Rising edge to cycle back through the BPTM process. Use if something in the process timed out or failed. This will interrupt a current process
    bRetry : BOOL := FALSE; 
END_VAR
VAR_OUTPUT

    q_xTransitionAuthorized    :    BOOL := FALSE; //Rising edge indicating the device is safe to move, use as input to move execute (which requires a rising edge)

    bError : BOOL; // Set if some issue occurs within the bptm
    nErrId : INT; // Set to non-zero to help understand the error.
    
END_VAR

VAR
    nTargetAssertionID    :    UDINT := 0;
    stTargetAssertion    :    ST_BeamParams; //Current target assertion
    nCurrentAssertionID    :    UDINT := 0;
    
    xNewBP    :    BOOL;
    xTranBP    :    BOOL;
    xFinalBP    :    BOOL;
    
    eBPTMState : E_BPTMState := Init;
    ePrevState : E_BPTMState := Init;
    
    xEntry : BOOL;
    rTransition : R_TRIG;
    xNewTarget : BOOL;
	
	bTransAssertionFailed : BOOL;
    bFinalAssertionFailed : BOOL;
	
	LogStrBuffer : ARRAY [0..LogBuffSize] OF STRING;
	LogBuffIdx : FB_Index := (LowerLimit:=0, UpperLimit:=LogBuffSize);
    
    nAssrtAttempt : INT; // Number of times we have tried asserting a BP set
    
    rtRetry : R_TRIG;
	
END_VAR
VAR CONSTANT
	LogBuffSize : INT := 40;
    cAssrtMax : INT := 3;
    
    BadTargetID : INT := 1001;
    BadTransID : INT := 1002;
    TransAssrtFail : INT := 2001;
    FinalAssrtFail : INT := 3001;
    
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[
rtRetry(CLK:=bRetry);

// Execute exit actions before transition back to NewTarget
IF nTargetAssertionID <> i_nRequestedAssertionID OR rtRetry.Q THEN
    CASE eBPTMState OF
        //NewTarget:
        WaitingForTransitionAssertion:
            WaitingForTransitionAssertion_EXIT();
        WaitingForFinalAssertion:
            WaitingForFinalAssertion_EXIT();
        Transitioning:
            DeauthorizeTransition();
        //CleaningUp: 
	END_CASE
    
    bError := FALSE;
    nErrID := 0;
    
    eBPTMState := E_BPTMState.NewTarget;
    xEntry := eBPTMState <> ePrevState;
    
END_IF

IF xEntry THEN nAssrtAttempt := 0; END_IF

IF bError THEN
    eBPTMState := E_BPTMState.Error;
END_IF

// States
CASE eBPTMState OF
    NewTarget:
        IF xEntry THEN
            NewTarget_ENTRY();
        ELSIF xNewBP THEN
            eBPTMState := E_BPTMState.WaitingForTransitionAssertion;
        ELSE
            SetNewTarget();
        END_IF
            
    WaitingForTransitionAssertion:
        IF xEntry OR bTransAssertionFailed THEN
            AssertTransitionBP();
        ELSIF xTranBP THEN
            WaitingForTransitionAssertion_EXIT();
            eBPTMState := E_BPTMState.WaitingForFinalAssertion;
        ELSE
            WaitingForTransitionAssertion_DO();
        END_IF
        
    WaitingForFinalAssertion:
        IF xEntry OR bFinalAssertionFailed THEN
            AssertFinalBP();
        ELSIF xFinalBP THEN
            WaitingForFinalAssertion_EXIT();
            eBPTMState := E_BPTMState.Transitioning;
        ELSE
            WaitingForFinalAssertion_DO();
        END_IF
        
    Transitioning:
        IF xEntry THEN
            AuthorizeTransition();
        ELSIF i_xDoneMoving THEN
            DeauthorizeTransition();
            eBPTMState := E_BPTMState.CleaningUp;
		END_IF
        
    CleaningUp:
        IF xEntry THEN
            RemoveTransitionAssertion();
		ELSE
			LogActions('Returning to idle');
			eBPTMState := E_BPTMState.Idle;
		END_IF
END_CASE

xEntry := ePrevState <> eBPTMState;
ePrevState := eBPTMState;


]]></ST>
    </Implementation>
    <Action Name="AssertFinalBP" Id="{4d723d61-220d-405f-a182-a1465a63ec6c}">
      <Implementation>
        <ST><![CDATA[//q_stFinalAssertion := stTargetAssertion;

//Clearing previous target parameters
(* This is considered safe at this step as the transition
state beam parameters should always be safer than the
current or target state beam parameters
*)
fbArbiter.RemoveRequest( nCurrentAssertionID );

LogActions(CONCAT('Removing final/current request: ', DWORD_TO_STRING(nCurrentAssertionID)) );
LogActions(CONCAT('Asserting target req.: ', DWORD_TO_STRING(nTargetAssertionID)) );

//Asserting target parameters
bFinalAssertionFailed := NOT fbArbiter.AddRequest(
    nTargetAssertionID,
    stTargetAssertion
);

IF bFinalAssertionFailed THEN
    LogActions('Assert final failed. ');
    nAssrtAttempt := nAssrtAttempt + 1;
    IF nAssrtAttempt > cAssrtMax THEN
        bError := TRUE;
        nErrID := FinalAssrtFail;
    END_IF    
END_IF

//Remembering final assertionID for removal later
IF NOT bFinalAssertionFailed THEN
	nCurrentAssertionID := nTargetAssertionID;
END_IF]]></ST>
      </Implementation>
    </Action>
    <Action Name="AssertTransitionBP" Id="{b83a9501-a83d-470d-a69e-33ae3b34fe7a}">
      <Implementation>
        <ST><![CDATA[
fbArbiter.RemoveRequest(i_TransitionAssertionID);

bTransAssertionFailed := NOT fbArbiter.AddRequest(
    i_TransitionAssertionID,
    i_stTransitionAssertion
);

IF bTransAssertionFailed THEN
    LogActions('Assert trans. failed. ');
    nAssrtAttempt := nAssrtAttempt + 1;
    IF nAssrtAttempt > cAssrtMax THEN
        bError := TRUE;
        nErrID := TransAssrtFail;
    END_IF    
END_IF
    ]]></ST>
      </Implementation>
    </Action>
    <Action Name="AuthorizeTransition" Id="{54c27c7d-d192-4622-86ba-b9bfdddeaf4c}">
      <Implementation>
        <ST><![CDATA[q_xTransitionAuthorized := TRUE;

LogActions('Authorizing transition');]]></ST>
      </Implementation>
    </Action>
    <Action Name="DeauthorizeTransition" Id="{f0778326-a9fa-4efe-a8f9-c035d4f8f750}">
      <Implementation>
        <ST><![CDATA[q_xTransitionAuthorized := FALSE;
LogActions('Deauthorizing transition');]]></ST>
      </Implementation>
    </Action>
    <Method Name="LogActions" Id="{41e851fc-2139-47b9-addb-eed4474544fc}">
      <Declaration><![CDATA[METHOD LogActions : BOOL
VAR_INPUT
	LogStr : STRING;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[LogStrBuffer[LogBuffIdx.IncVal()] := LogStr;]]></ST>
      </Implementation>
    </Method>
    <Action Name="NewTarget_ENTRY" Id="{74162cbe-7b3e-460c-acdc-81cb450d0fca}">
      <Implementation>
        <ST><![CDATA[xNewBP := False;]]></ST>
      </Implementation>
    </Action>
    <Action Name="RemoveTransitionAssertion" Id="{8acfecb4-62fe-4e98-9675-1b02c9445348}">
      <Implementation>
        <ST><![CDATA[//q_stTransitionAssertion := PMPS_GVL.cstFullBeam;

//Removing transition assertion
fbArbiter.RemoveRequest( i_TransitionAssertionID );

LogActions('Removing transition req');

//TODO add something to verify removal]]></ST>
      </Implementation>
    </Action>
    <Action Name="SetNewTarget" Id="{9b0c4cad-05e5-418b-8504-1d8c52f619a4}">
      <Implementation>
        <ST><![CDATA[IF F_ValidReqID(i_nRequestedAssertionID) AND
    F_ValidReqID(i_TransitionAssertionID) THEN
    
    stTargetAssertion := i_stRequestedAssertion;
    nTargetAssertionID := i_nRequestedAssertionID;
	
	LogActions('New target set');
	
    xNewBP := TRUE;
    
ELSE
    IF NOT F_ValidReqID(nTargetAssertionID) THEN
        
        nErrID := BadTargetID;
    ELSIF NOT F_ValidReqID(i_TransitionAssertionID) THEN
        nErrID := BadTransID;
	END_IF
    LogActions('Error in set new target');
    bError := TRUE;
END_IF
]]></ST>
      </Implementation>
    </Action>
    <Action Name="WaitingForFinalAssertion_DO" Id="{91b8022f-8c2d-480b-800c-6fe8741ef51c}">
      <Implementation>
        <ST><![CDATA[//Final Assertion Verification

xFinalBP := F_SafeBPCompare(stCurrentBeamParameters, stTargetAssertion) AND
    fbArbiter.CheckRequest( i_nRequestedAssertionID);;]]></ST>
      </Implementation>
    </Action>
    <Action Name="WaitingForFinalAssertion_EXIT" Id="{6032c85f-f58f-40a0-a7a9-09c0400dd89e}">
      <Implementation>
        <ST><![CDATA[//Set this bool false so we can get a rising edge on the next try
xFinalBP := FALSE;
PMPS_GVL.SuccessfulPreemption := PMPS_GVL.SuccessfulPreemption + 1;
]]></ST>
      </Implementation>
    </Action>
    <Action Name="WaitingForTransitionAssertion_DO" Id="{efd5ef21-1274-446e-b4e2-eb587c706e95}">
      <Implementation>
        <ST><![CDATA[//Transition Assertion Verification
xTranBP    := F_SafeBPCompare(stCurrentBeamParameters, i_stTransitionAssertion) AND
    fbArbiter.CheckRequest(i_TransitionAssertionID);]]></ST>
      </Implementation>
    </Action>
    <Action Name="WaitingForTransitionAssertion_EXIT" Id="{97cb140a-13c7-46d0-9d70-2452731d3375}">
      <Implementation>
        <ST><![CDATA[xTranBP := FALSE;
PMPS_GVL.SuccessfulPreemption := PMPS_GVL.SuccessfulPreemption + 1;
]]></ST>
      </Implementation>
    </Action>
  </POU>
</TcPlcObject>